import itertools
from types import SimpleNamespace

import matplotlib.pyplot as plt
import numpy as np
import pytest
from astropy.coordinates import SkyCoord
from astropy.table import Table

from util import plot

engines = ['levmar', 'gsl']
iterative = [False, True]
configurations = list(itertools.product(engines, iterative))
ids = [f'{e}_{"iterative" if i else "classic"}' for e, i in configurations]


@pytest.fixture(scope='session')
def des_reference(datafiles, tolerances):
    catalog = Table.read(datafiles / 'des' / 'des_catalog_reference.fits')
    bright_filter = catalog['auto_flux'] / catalog['auto_flux_err'] >= tolerances['signal_to_noise']
    return catalog[bright_filter]


@pytest.fixture(scope='module', params=configurations, ids=ids)
def des_run(request, sourcextractor, datafiles, module_output_area, tolerances):
    """
    Run sourcextractor on a single frame. Overrides the output area per test, so
    it is only run once for this setup. The output is filtered by signal/noise.
    """
    module_output_area = module_output_area / request.param[0]
    module_output_area /= 'iterative' if request.param[1] else 'classic'

    sourcextractor.set_output_directory(module_output_area)
    run = sourcextractor(
        f'engine={request.param[0]}', f'iterative={request.param[1]}',
        detection_image=datafiles / 'des' / 'des_compressed.fits.fz[1]',
        weight_image=datafiles / 'des' / 'des_compressed.fits.fz[2]',
        weight_absolute=1,
        weight_type='weight',
        weight_threshold=1.0e-06,
        weight_use_symmetry=1,
        python_config_file=datafiles / 'des' / 'des_modelfitting.py',
        background_cell_size=256,
        smoothing_box_size=3,
        detection_threshold=3.0,
        background_value=0.0,
        core_threshold_value=1.158,
        partition_corethreshold=0,
        segmentation_filter=datafiles / 'des' / 'gauss_4.0_7x7.conv',
        detection_image_interpolation=0,
        detection_minimum_area=6,
        grouping_algorithm='none',
        magnitude_zero_point=30.0,
        model_fitting_iterations=80,
        model_fitting_engine='levmar',
        partition_minimum_area=10,
        output_properties='PixelCentroid,WorldCentroid,SourceIDs,GroupInfo,SourceFlags,AutoPhotometry,FlexibleModelFitting',
    )
    assert run.exit_code == 0
    catalog = Table.read(module_output_area / 'output.fits')  # sourcextractor.get_output_catalog())
    bright_filter = catalog['auto_flux'] / catalog['auto_flux_err'] >= tolerances['signal_to_noise']
    catalog.meta['output_area'] = module_output_area
    return SimpleNamespace(run=run, catalog=catalog[bright_filter])


@pytest.fixture(scope='module')
def des_catalog(des_run):
    return des_run.catalog


@pytest.fixture(scope='module')
def des_cross(des_catalog, des_reference, datafiles, tolerances):
    run_coords = SkyCoord(des_catalog['world_centroid_alpha'], des_catalog['world_centroid_delta'])
    ref_coords = SkyCoord(des_reference['world_centroid_alpha'], des_reference['world_centroid_delta'])
    idx, _, _ = run_coords.match_to_catalog_sky(ref_coords)
    return des_reference[idx]


def test_detection(des_catalog, des_cross, des_reference):
    """
    All sources on the reference are found
    """
    assert np.in1d(des_reference['source_id'], des_cross['source_id']).all()


def test_magnitude(des_catalog, des_cross, tolerances):
    """
    Check the magnitude generated by the model fitting (a dependent column on the flux!)
    """

    catalog_mag = des_catalog['mag']
    ref_mag = des_cross['mag']
    ratio = catalog_mag / ref_mag
    # Not flagged
    ratio = ratio[des_cross['source_flags'] == 0]

    assert all((ratio <= 1 + tolerances['magnitude']) & (ratio >= 1 - tolerances['magnitude']))


@pytest.mark.report
def test_generate_report(des_run, des_cross, datafiles):
    """
    Not quite a test. Generate a PDF report allowing for better insights.
    """
    des_catalog = des_run.catalog
    module_output_area = des_catalog.meta['output_area']
    image = plot.Image(datafiles / 'des' / 'des_compressed.fits.fz', hdu_index=0)
    with plot.Report(module_output_area / 'report.pdf') as report:
        loc_map = plot.Location(image)
        loc_map.add('Reference run', des_cross, 'x', 'y', marker='1')
        loc_map.add('SourceXtractor++', des_catalog, 'x', 'y', marker='2')
        report.add(loc_map)

        # Magnitude
        fig_mag = plt.figure(figsize=plot._page_size)
        plt.title('Fitted magnitude')
        plt.scatter(des_cross['mag'], des_catalog['mag'], c=des_cross['source_id'])
        plt.xlabel('Reference run')
        plt.ylabel('Magnitude')
        mag_min, mag_max = des_cross['mag'].min(), des_cross['mag'].max()
        plt.plot([mag_min, mag_max], [mag_min, mag_max], c='red', linestyle='--')
        plt.colorbar(label='source_id')
        plt.tight_layout()
        report.add(fig_mag)

        fig_img_dmag = plt.figure(figsize=plot._page_size)
        plt.title('$\\Delta$mag')
        dmag = des_cross['mag'] - des_catalog['mag']
        dmag_abs = np.abs(dmag).max()
        plt.imshow(image.for_display(), cmap=plot._img_cmap)
        plt.scatter(des_cross['x'], des_catalog['y'], c=dmag, cmap='jet', vmin=-dmag_abs, vmax=dmag_abs)
        plt.colorbar()
        plt.tight_layout()
        report.add(fig_img_dmag)

        fig_mag_err, axes = plt.subplots(figsize=plot._page_size, nrows=2, sharex=True, sharey=True)

        axes[0].set_title('Reference run')
        sme = axes[0].scatter(des_cross['mag'], des_cross['mag_err'], c=des_cross['source_id'])
        axes[0].set_ylabel('mag_err')
        plt.colorbar(sme, ax=axes[0], label='source_id')
        axes[1].set_title('SourceXtractor++')
        sme2 = axes[1].scatter(des_catalog['mag'], des_catalog['mag_err'], c=des_catalog['source_id'])
        axes[1].set_yscale('log')
        axes[1].set_xlabel('mag')
        axes[1].set_ylabel('mag_err')
        plt.colorbar(sme2, ax=axes[1], label='source_id')

        fig_mag_err.tight_layout()
        report.add(fig_mag_err)

        # Model fitting meta (iterations, chi2)
        fig_iters, axes = plt.subplots(figsize=plot._page_size, ncols=2)

        axes[0].set_title('Meta iterations')
        _, bins, _ = axes[0].hist(des_cross['fmf_meta_iterations'], histtype='step', label='Reference run')
        axes[0].hist(des_catalog['fmf_meta_iterations'], histtype='step', linestyle='--', label='SourceXtractor++')
        axes[0].set_xlabel('Meta iterations')
        axes[0].legend()

        axes[1].set_title('Iterations vs $\\chi^2$')
        axes[1].scatter(des_cross['fmf_iterations'], des_cross['fmf_reduced_chi_2'], marker='1', label='Reference run')
        axes[1].scatter(des_catalog['fmf_iterations'], des_catalog['fmf_reduced_chi_2'], marker='2',
                        label='SourceXtractor++')
        axes[1].set_yscale('log')
        axes[1].set_xlabel('N.Iterations')
        axes[1].set_ylabel('$\\chi^2$')
        axes[1].legend()

        fig_iters.tight_layout()
        report.add(fig_iters)

        # Flags
        flags = plot.Flags(image)
        flags.set_reference(
            'Reference run', des_cross,
            'x', 'y', 'source_flags'
        )
        flags.set_sourcextractor(
            'SourceXtractor++', des_catalog,
            'x', 'y', 'source_flags'
        )
        report.add(flags)

        # report.add(plot.RunResult(des_run.run))
