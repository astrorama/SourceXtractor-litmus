import os

import numpy as np
import pytest
from astropy.table import Table

from util import plot
from util.validation import CrossValidation


@pytest.fixture
def modelfitting_catalog(sourcextractor, datafiles, module_output_area, tolerances):
    """
    Run sourcextractor on a single frame. Overrides the output area per test so
    SExtractor is only run once for this setup.
    The output is filtered by signal/noise.
    """
    sourcextractor.set_output_directory(module_output_area)

    output_catalog = module_output_area / 'output.fits'
    if not os.path.exists(output_catalog):
        run = sourcextractor(
            output_properties='SourceIDs,PixelCentroid,WorldCentroid,IsophotalFlux,FlexibleModelFitting',
            detection_image=datafiles / 'sim09' / 'img' / 'sim09_r_01.fits',
            python_config_file=datafiles / 'sim09' / 'sim09_single_modelfitting.py'
        )
        assert run.exit_code == 0

    catalog = Table.read(output_catalog)
    bright_filter = catalog['isophotal_flux'] / catalog['isophotal_flux_err'] >= tolerances['signal_to_noise']
    catalog['model_flux_r_err'][catalog['model_flux_r_err'] >= 99.] = np.nan
    catalog['model_mag_r_err'][catalog['model_mag_r_err'] >= 99.] = np.nan
    return catalog[bright_filter]


@pytest.fixture
def modelfitting_cross(modelfitting_catalog, sim09_r_simulation, datafiles, tolerances):
    detection_image = datafiles / 'sim09' / 'img' / 'sim09_r_01.fits'
    cross = CrossValidation(detection_image, sim09_r_simulation, max_dist=tolerances['distance'])
    return cross(modelfitting_catalog['pixel_centroid_x'], modelfitting_catalog['pixel_centroid_y'])


def test_detection(modelfitting_cross, sim09_r_01_cross):
    """
    Test that the number of results matches the ref, and that they are reasonably close
    """
    assert len(modelfitting_cross.stars_found) >= len(sim09_r_01_cross.stars_found)
    assert len(modelfitting_cross.galaxies_found) >= len(sim09_r_01_cross.galaxies_found)


def test_magnitude(modelfitting_catalog, modelfitting_cross, sim09_r_01_reference, sim09_r_01_cross, tolerances):
    """
    Check the magnitude generated by the model fitting (a dependent column on the flux!)
    """

    catalog_hits = modelfitting_catalog[modelfitting_cross.all_catalog]
    ref_hits = sim09_r_01_reference[sim09_r_01_cross.all_catalog]

    catalog_mag = catalog_hits['model_mag_r']
    ref_mag = ref_hits['MAG_MODEL']

    catalog_mag_diff = catalog_mag - modelfitting_cross.all_magnitudes
    ref_mag_diff = ref_mag - sim09_r_01_cross.all_magnitudes

    assert np.median(catalog_mag_diff) <= np.median(ref_mag_diff) * (1 + tolerances['magnitude'])


def test_generate_report(modelfitting_catalog, sim09_r_01_reference, sim09_r_simulation, datafiles, module_output_area):
    """
    Not quite a test. Generate a PDF report to allow for better insights.
    """
    image = plot.Image(datafiles / 'sim09' / 'img' / 'sim09_r_01.fits')
    with plot.Report(module_output_area / 'report.pdf') as report:
        loc_map = plot.Location(image, sim09_r_simulation)
        loc_map.add('SExtractor2', sim09_r_01_reference, 'XMODEL_IMAGE', 'YMODEL_IMAGE', marker='1')
        loc_map.add('SExtractor++', modelfitting_catalog, 'model_x', 'model_y', marker='2')
        report.add(loc_map)

        dist = plot.Distances(image, sim09_r_simulation)
        dist.add('SExtractor2', sim09_r_01_reference, 'XMODEL_IMAGE', 'YMODEL_IMAGE', marker='o')
        dist.add('SExtractor++', modelfitting_catalog, 'model_x', 'model_y', marker='.')
        report.add(dist)

        mag_r = plot.Magnitude('R', sim09_r_simulation)
        mag_r.add(
            'SExtractor2',
            sim09_r_01_reference, 'ALPHA_SKY', 'DELTA_SKY', 'MAG_MODEL', 'MAGERR_MODEL',
            marker='o'
        )
        mag_r.add(
            'SExtractor++',
            modelfitting_catalog, 'world_centroid_alpha', 'world_centroid_delta', 'model_mag_r', 'model_mag_r_err',
            marker='.'
        )
        report.add(mag_r)

        hist = plot.Histogram(image, sim09_r_simulation)
        hist.add(
            'SExtractor2 MAG_MODEL', sim09_r_01_reference,
            'ALPHA_SKY', 'DELTA_SKY',
            'MAG_MODEL'
        )
        hist.add(
            'SExtractor++ model_mag_r', modelfitting_catalog,
            'world_centroid_alpha', 'world_centroid_delta',
            'model_mag_r'
        )
        report.add(hist)
