from types import SimpleNamespace

import numpy as np
import pytest
from astropy.table import Table

from util import plot
from util.matching import CrossMatching

engines = ['levmar', 'gsl']


@pytest.fixture(scope='module', params=engines)
def modelfitting_run(request, sourcextractor, datafiles, module_output_area, tolerances):
    """
    Run sourcextractor on a single frame. Overrides the output area per test so
    SExtractor is only run once for this setup.
    The output is filtered by signal/noise.
    """
    module_output_area = module_output_area / request.param
    sourcextractor.set_output_directory(module_output_area)

    run = sourcextractor(
        'engine={}'.format(request.param),
        grouping_algorithm='MOFFAT',
        output_properties='SourceIDs,PixelCentroid,WorldCentroid,IsophotalFlux,FlexibleModelFitting',
        detection_image=datafiles / 'sim12' / 'img' / 'sim12_r_01.fits.gz',
        python_config_file=datafiles / 'sim12' / 'sim12_single_modelfitting.py'
    )
    assert run.exit_code == 0

    catalog = Table.read(sourcextractor.get_output_catalog())
    bright_filter = catalog['isophotal_flux'] / catalog['isophotal_flux_err'] >= tolerances['signal_to_noise']
    catalog.meta['engine'] = request.param
    return SimpleNamespace(run=run, catalog=catalog[bright_filter])


@pytest.fixture(scope='module')
def modelfitting_catalog(modelfitting_run):
    return modelfitting_run.catalog


@pytest.fixture(scope='module')
def modelfitting_cross(modelfitting_catalog, sim12_r_simulation, datafiles, tolerances):
    detection_image = datafiles / 'sim12' / 'img' / 'sim12_r_01.fits.gz'
    cross = CrossMatching(detection_image, sim12_r_simulation, max_dist=tolerances['distance'])
    return cross(modelfitting_catalog['pixel_centroid_x'], modelfitting_catalog['pixel_centroid_y'])


def test_detection(modelfitting_cross, sim12_r_01_cross):
    """
    Test that the number of results matches the ref, and that they are reasonably close
    """
    assert np.isclose(len(modelfitting_cross.stars_found), len(sim12_r_01_cross.stars_found), rtol=0.05)
    assert np.isclose(len(modelfitting_cross.galaxies_found), len(sim12_r_01_cross.galaxies_found), rtol=0.05)


def test_magnitude(modelfitting_catalog, modelfitting_cross, sim12_r_01_reference, sim12_r_01_cross, tolerances):
    """
    Check the magnitude generated by the model fitting (a dependent column on the flux!)
    """

    catalog_hits = modelfitting_catalog[modelfitting_cross.all_catalog]
    ref_hits = sim12_r_01_reference[sim12_r_01_cross.all_catalog]

    catalog_mag = catalog_hits['model_mag_r']
    ref_mag = ref_hits['MAG_MODEL']

    catalog_mag_diff = np.abs(catalog_mag - modelfitting_cross.all_magnitudes)
    ref_mag_diff = np.abs(ref_mag - sim12_r_01_cross.all_magnitudes)

    assert np.median(catalog_mag_diff) <= np.median(ref_mag_diff) * (1 + tolerances['magnitude'])


@pytest.mark.report
def test_generate_report(modelfitting_run, sim12_r_01_reference, sim12_r_simulation, datafiles, module_output_area):
    """
    Not quite a test. Generate a PDF report to allow for better insights.
    """
    modelfitting_catalog = modelfitting_run.catalog
    module_output_area = module_output_area / modelfitting_catalog.meta['engine']
    image = plot.Image(datafiles / 'sim12' / 'img' / 'sim12_r_01.fits.gz')
    with plot.Report(module_output_area / 'report.pdf') as report:
        loc_map = plot.Location(image, sim12_r_simulation)
        loc_map.add('SExtractor2', sim12_r_01_reference, 'XMODEL_IMAGE', 'YMODEL_IMAGE', marker='1')
        loc_map.add('SourceXtractor++', modelfitting_catalog, 'model_x', 'model_y', marker='2')
        report.add(loc_map)

        dist = plot.Distances(image, sim12_r_simulation)
        dist.add('SExtractor2', sim12_r_01_reference, 'XMODEL_IMAGE', 'YMODEL_IMAGE', marker='o')
        dist.add('SourceXtractor++', modelfitting_catalog, 'model_x', 'model_y', marker='.')
        report.add(dist)

        mag_r = plot.Magnitude('R', sim12_r_simulation)
        mag_r.add(
            'SExtractor2',
            sim12_r_01_reference, 'ALPHA_SKY', 'DELTA_SKY', 'MAG_MODEL', 'MAGERR_MODEL',
            marker='o'
        )
        mag_r.add(
            'SourceXtractor++',
            modelfitting_catalog, 'world_centroid_alpha', 'world_centroid_delta', 'model_mag_r', 'model_mag_r_err',
            marker='.'
        )
        report.add(mag_r)

        hist = plot.Histogram(image, sim12_r_simulation)
        hist.add(
            'SExtractor2 MAG_MODEL', sim12_r_01_reference,
            'ALPHA_SKY', 'DELTA_SKY',
            'MAG_MODEL'
        )
        hist.add(
            'SourceXtractor++ model_mag_r', modelfitting_catalog,
            'world_centroid_alpha', 'world_centroid_delta',
            'model_mag_r'
        )
        report.add(hist)

        report.add(plot.RunResult(modelfitting_run.run))
